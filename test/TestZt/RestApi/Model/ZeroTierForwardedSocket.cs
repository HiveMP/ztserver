/* 
 * ztserver
 *
 * The ztserver REST API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ZeroTierForwardedSocket
    /// </summary>
    [DataContract]
    public partial class ZeroTierForwardedSocket :  IEquatable<ZeroTierForwardedSocket>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZeroTierForwardedSocket" /> class.
        /// </summary>
        /// <param name="Localport">Localport.</param>
        /// <param name="Proxyport">Proxyport.</param>
        /// <param name="Zt4port">Zt4port.</param>
        /// <param name="Zt6port">Zt6port.</param>
        public ZeroTierForwardedSocket(int? Localport = default(int?), int? Proxyport = default(int?), int? Zt4port = default(int?), int? Zt6port = default(int?))
        {
            this.Localport = Localport;
            this.Proxyport = Proxyport;
            this.Zt4port = Zt4port;
            this.Zt6port = Zt6port;
        }
        
        /// <summary>
        /// Gets or Sets Localport
        /// </summary>
        [DataMember(Name="localport", EmitDefaultValue=false)]
        public int? Localport { get; set; }

        /// <summary>
        /// Gets or Sets Proxyport
        /// </summary>
        [DataMember(Name="proxyport", EmitDefaultValue=false)]
        public int? Proxyport { get; set; }

        /// <summary>
        /// Gets or Sets Zt4port
        /// </summary>
        [DataMember(Name="zt4port", EmitDefaultValue=false)]
        public int? Zt4port { get; set; }

        /// <summary>
        /// Gets or Sets Zt6port
        /// </summary>
        [DataMember(Name="zt6port", EmitDefaultValue=false)]
        public int? Zt6port { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ZeroTierForwardedSocket {\n");
            sb.Append("  Localport: ").Append(Localport).Append("\n");
            sb.Append("  Proxyport: ").Append(Proxyport).Append("\n");
            sb.Append("  Zt4port: ").Append(Zt4port).Append("\n");
            sb.Append("  Zt6port: ").Append(Zt6port).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ZeroTierForwardedSocket);
        }

        /// <summary>
        /// Returns true if ZeroTierForwardedSocket instances are equal
        /// </summary>
        /// <param name="other">Instance of ZeroTierForwardedSocket to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZeroTierForwardedSocket other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Localport == other.Localport ||
                    this.Localport != null &&
                    this.Localport.Equals(other.Localport)
                ) && 
                (
                    this.Proxyport == other.Proxyport ||
                    this.Proxyport != null &&
                    this.Proxyport.Equals(other.Proxyport)
                ) && 
                (
                    this.Zt4port == other.Zt4port ||
                    this.Zt4port != null &&
                    this.Zt4port.Equals(other.Zt4port)
                ) && 
                (
                    this.Zt6port == other.Zt6port ||
                    this.Zt6port != null &&
                    this.Zt6port.Equals(other.Zt6port)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Localport != null)
                    hash = hash * 59 + this.Localport.GetHashCode();
                if (this.Proxyport != null)
                    hash = hash * 59 + this.Proxyport.GetHashCode();
                if (this.Zt4port != null)
                    hash = hash * 59 + this.Zt4port.GetHashCode();
                if (this.Zt6port != null)
                    hash = hash * 59 + this.Zt6port.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
